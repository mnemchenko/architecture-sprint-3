@startuml "SmartHomeSystem"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

System_Ext(devices, "Devices", "The actual smart home devices, such as sensors, thermostats, lights, and cameras")

System_Ext(web, "SmartHome Web Client", "Provides UI to user for smart home control and management capabilities")

System_Boundary(c1, "SmartHome System") {
    Container(mqtt, "Low-level Pub/Sub Broker", "Eclipse Mosquitto MQTT Broker") {
        Component(mqttBroker, "Eclipse Mosquitto", "Message Broker")
        Component(mqttDevicesUpdate, "Device Access Update Consumer", "Consumer")
    }
    Container(broker, "Message Broker", "Apache Kafka broker", "") {
        Component(kafka, "Apache Kafka", "Message Broker")
        Component(mqttKafka, "Apache Kafka MQTT Connector", "Message Broker Connector")
        Component(mqttSinkKafka, "Apache Kafka MQTT Sink", "Message Broker Connector")
    }

    Container(ag, "API Gateway", "", "")

    Container(telemetryService, "Telemetry Service", "Java", "", $tags="microService") {
        Component(telemetryServiceGetMetricController, "Get Metric History Controller")

        Component(telemetryServiceInfrastructureUpdatesConsumer, "Infrastructure Updates Consumer")
        Component(telemetryServiceUserAclUpdatesConsumer, "User Acl Updates Consumer")
        Component(telemetryServiceMetricValuePublishedConsumer, "Metric Value Published Consumer", "", "Consumes events with current metric values")
    }
    ContainerDb(telemetryDb, "Telemetry Database", "InfluxDB", "Stores telemetry historical data", $tags = "storage")
}

Rel(devices, mqttBroker, "Publish metrics data, state changes, etc.", "MQTT")
Rel(devices, mqttBroker, "Consume commands", "MQTT")

Rel(mqttKafka, kafka, "Publishes devices events")
Rel(mqttKafka, mqttBroker, "Consumes devices events")
Rel(mqttSinkKafka, mqttBroker, "Publish commands")
Rel(mqttSinkKafka, kafka, "Consumes commands")
Rel(mqttDevicesUpdate, kafka, "Consumes devices topology events")
Rel(mqttDevicesUpdate, mqttBroker, "Adds devices permissions based on events")

Rel(telemetryServiceMetricValuePublishedConsumer, kafka, "Consumes events")
Rel(telemetryServiceUserAclUpdatesConsumer, kafka, "Consumes events")
Rel(telemetryServiceInfrastructureUpdatesConsumer, kafka, "Consumes events")
Rel(telemetryServiceGetMetricController, telemetryDb, "Requests data from")
Rel(telemetryServiceMetricValuePublishedConsumer, telemetryDb, "Saves data to")
Rel(telemetryServiceUserAclUpdatesConsumer, telemetryDb, "Saves data to")
Rel(telemetryServiceInfrastructureUpdatesConsumer, telemetryDb, "Saves data to")

Rel(ag, telemetryServiceGetMetricController, "Requests data")

Rel(web, ag, "Perform commands")
Rel(web, ag, "Gets data")

@enduml