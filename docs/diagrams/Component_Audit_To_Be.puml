@startuml "SmartHomeSystem"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

System_Ext(devices, "Devices", "The actual smart home devices, such as sensors, thermostats, lights, and cameras")

System_Ext(web, "SmartHome Web Client", "Provides UI to user for smart home control and management capabilities")

System_Ext(s3, "S3-compatible Object Storage", "Stores video and snapshots from cameras")

System_Ext(cdn, "CDN", "Delivers static content fast around the world (frontend, video and snapshots)")

System_Boundary(c1, "SmartHome System") {
    Container(mqtt, "Low-level Pub/Sub Broker", "Eclipse Mosquitto MQTT Broker") {
        Component(mqttBroker, "Eclipse Mosquitto", "Message Broker")
        Component(mqttDevicesUpdate, "Device Access Update Consumer", "Consumer")
    }
    Container(broker, "Message Broker", "Apache Kafka broker", "") {
        Component(kafka, "Apache Kafka", "Message Broker")
        Component(mqttKafka, "Apache Kafka MQTT Connector", "Message Broker Connector")
        Component(mqttSinkKafka, "Apache Kafka MQTT Sink", "Message Broker Connector")
    }

    Container(ag, "API Gateway", "", "")

    Container(auditService, "Audit Service", "Java", "Keep history of audit events", $tags="microService") {
        Component(auditServiceEventsHistoryController, "Get Audit Events List History Controller")

        Component(auditServiceInfrastructureUpdatesConsumer, "Infrastructure Updates Consumer")
        Component(auditServiceUserAclUpdatesConsumer, "User Acl Updates Consumer")
        Component(auditServiceAccessControlEventsConsumers, "Access Control Events Consumers", "A set of consumers for different access control events", "Consumes access control events: providing of access, temporary codes, accessing to objects, etc.")
    }
    ContainerDb(auditDb, "Audit Database", "MongoDB", "Stores audit events, infrastructure and user read model data", $tags = "storage")
}

Rel(devices, mqttBroker, "Publish metrics data, state changes, etc.", "MQTT")
Rel(devices, mqttBroker, "Consume commands", "MQTT")

Rel(mqttKafka, kafka, "Publishes devices events")
Rel(mqttKafka, mqttBroker, "Consumes devices events")
Rel(mqttSinkKafka, mqttBroker, "Publish commands")
Rel(mqttSinkKafka, kafka, "Consumes commands")
Rel(mqttDevicesUpdate, kafka, "Consumes devices topology events")
Rel(mqttDevicesUpdate, mqttBroker, "Adds devices permissions based on events")

Rel(auditServiceInfrastructureUpdatesConsumer, kafka, "Consumes events")
Rel(auditServiceUserAclUpdatesConsumer, kafka, "Consumes events")
Rel(auditServiceAccessControlEventsConsumers, kafka, "Consumes events")
Rel(auditServiceEventsHistoryController, auditDb, "Requests data in")
Rel(auditServiceUserAclUpdatesConsumer, auditDb, "Saves data to")
Rel(auditServiceInfrastructureUpdatesConsumer, auditDb, "Saves data to")
Rel(auditServiceAccessControlEventsConsumers, auditDb, "Saves data to")

Rel(devices,s3,"Save video and snapshots")
Rel(cdn,s3,"Get originals")
Rel(auditServiceEventsHistoryController,cdn,"Signs URLs for snapshots related to audit events")

Rel(ag, auditServiceEventsHistoryController, "Requests data")

Rel(web, ag, "Perform commands")
Rel(web, ag, "Gets data")

@enduml