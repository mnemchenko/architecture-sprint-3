@startuml "SmartHomeSystem"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

System_Ext(devices, "Devices", "The actual smart home devices, such as sensors, thermostats, lights, and cameras")

System_Ext(web, "SmartHome Web Client", "Provides UI to user for smart home control and management capabilities")

System_Boundary(c1, "SmartHome System") {
    Container(mqtt, "Low-level Pub/Sub Broker", "Eclipse Mosquitto MQTT Broker") {
        Component(mqttBroker, "Eclipse Mosquitto", "Message Broker")
        Component(mqttDevicesUpdate, "Device Access Update Consumer", "Consumer")
    }
    Container(broker, "Message Broker", "Apache Kafka broker", "") {
        Component(kafka, "Apache Kafka", "Message Broker")
        Component(mqttKafka, "Apache Kafka MQTT Connector", "Message Broker Connector")
        Component(mqttSinkKafka, "Apache Kafka MQTT Sink", "Message Broker Connector")
    }

    Container(ag, "API Gateway", "", "")

    Container(climateControlService, "Climate Control Service", "Java", "", $tags="microService") {
        Component(climateControlServiceSetRoomTemperatureController, "Set Room Temperature Controller")
        Component(climateControlServiceGetRoomsTemperatureController, "Get Rooms Temperature Controller")

        Component(climateControlServiceTemperatureSettingsChangedEventsProducer, "Temperature Settings Changed Events Pull Publisher","Message Producer","Publishes events on settings change")

        Component(climateControlServiceInfrastructureUpdatesConsumer, "Infrastructure Updates Consumer")
        Component(climateControlServiceUserAclUpdatesConsumer, "User Acl Updates Consumer")
    }
    ContainerDb(climateControlDb, "Climate Control Database", "MongoDB", "Stores climate control preferences data (desired temperature, humidity level and other parameters for different rooms or zones: night temperature, comfort range for a particular time of day, etc.), read model for infrastructure", $tags = "storage")
}

Rel(devices, mqttBroker, "Publish metrics data, state changes, etc.", "MQTT")
Rel(devices, mqttBroker, "Consume commands", "MQTT")

Rel(mqttKafka, kafka, "Publishes devices events")
Rel(mqttKafka, mqttBroker, "Consumes devices events")
Rel(mqttSinkKafka, mqttBroker, "Publish commands")
Rel(mqttSinkKafka, kafka, "Consumes commands")
Rel(mqttDevicesUpdate, kafka, "Consumes devices topology events")
Rel(mqttDevicesUpdate, mqttBroker, "Adds devices permissions based on events")

Rel(climateControlServiceInfrastructureUpdatesConsumer, kafka, "Consumes events")
Rel(climateControlServiceUserAclUpdatesConsumer, kafka, "Consumes events")
Rel(climateControlServiceUserAclUpdatesConsumer, climateControlDb, "Saves data to")
Rel(climateControlServiceInfrastructureUpdatesConsumer, climateControlDb, "Saves data to")
Rel(climateControlServiceTemperatureSettingsChangedEventsProducer, kafka, "Publishes events")
Rel(climateControlServiceTemperatureSettingsChangedEventsProducer, climateControlDb, "Requests data from")
Rel(climateControlServiceSetRoomTemperatureController, climateControlDb, "Saves data to")
Rel(climateControlServiceGetRoomsTemperatureController, climateControlDb, "Requests data from")

Rel(ag, climateControlServiceSetRoomTemperatureController, "Requests data")
Rel(ag, climateControlServiceGetRoomsTemperatureController, "Requests data")

Rel(web, ag, "Perform commands")
Rel(web, ag, "Gets data")

@enduml